<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

	<!--mybatis可以使用properties来引入外部properties配置文件的内容-->
	<properties resource="dbconfig.properties"></properties>

	<!--全局配置=============================-->
	<settings>
		<!-- 全局配置缓存 -->
		<setting name="cacheEnabled" value="true"/>
		<!-- true开启懒加载，关联的值在使用的时候会被延迟加载(不加载关联值) -->
		<setting name="lazyLoadingEnabled" value="false"/>
		<!-- true开启时会，全部加载，false:在需要时加载 -->
		<setting name="aggressiveLazyLoading" value="false"/>
		<!-- 指定哪个对象的方法触发一次延迟加载 -->
		<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode"/>
		<!--开启驼峰命名-->
		<setting name="mapUnderscoreToCamelCase" value="true"/>
	</settings>


	<!-- 配置插件 ============================ -->

	<plugins>
		<!--自定义插件-->
		<plugin interceptor="plugin.MyPlugin">
			<property name="name" value="xinrui.tian"/> <!--通过插件拦截该属性-->
		</plugin>

		<!--分页插件-->
		<plugin interceptor="com.github.pagehelper.PageInterceptor"></plugin>
	</plugins>

	<!--
	    <typeAliases>：别名处理器：可以为我们的java类型起别名 	别名不区分大小写
		<typeAlias>:为某个java类型起别名
		type:指定要起别名的类型全类名;默认别名就是类名小写
		alias:指定新的别名
		<package>:为某个包下的所有类批量起别名
		name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写），）
		批量起别名的情况下，使用@Alias注解为某个类型指定新的别名
	-->
	<!--
		<typeAliases>
			<typeAlias type="com.atguigu.mybatis.bean.Employee" alias="emp"/>
			<package name="com.atguigu.mybatis.bean"/>
		</typeAliases>
	-->
		
	<!-- 
	    <environments>：环境变量配置。mybatis可以配置多种环境 ,default指定使用某种环境。可以达到快速切换环境。
		<environment>：配置一个具体的环境信息；id代表当前环境的唯一标识
		必须有两个标签；
			<transactionManager>：事务管理器；
				type：事务管理器的类型;JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)
					  自定义事务管理器：实现TransactionFactory接口.type指定为全类名

			<dataSource>：数据源;
				type:数据源类型;UNPOOLED(UnpooledDataSourceFactory)
							|POOLED(PooledDataSourceFactory)
							|JNDI(JndiDataSourceFactory)
				自定义数据源：实现DataSourceFactory接口，type是全类名
	-->

	<environments default="dev_mysql">
		<environment id="dev_mysql">
			<transactionManager type="JDBC"></transactionManager>
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>

		<!--<environment id="dev_oracle">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${orcl.driver}" />
				<property name="url" value="${orcl.url}" />
				<property name="username" value="${orcl.username}" />
				<property name="password" value="${orcl.password}" />
			</dataSource>
		</environment>-->
	</environments>

	<!--
		<databaseIdProvider>：支持多数据库厂商的；
		 	type="DB_VENDOR"：VendorDatabaseIdProvider:作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，
		 												mybatis就能根据数据库厂商标识来执行不同的sql;
		 	MySQL，Oracle，SQL Server等
	  -->
	<!--<databaseIdProvider type="DB_VENDOR">
		&lt;!&ndash; 为不同的数据库厂商起别名 &ndash;&gt;
		<property name="MySQL" value="dev_mysql"/>
		&lt;!&ndash;<property name="Oracle" value="oracle"/>&ndash;&gt;
	</databaseIdProvider>-->
	
	<!--
		将我们写好的sql映射文件（xxxxMapper.xml）注册到全局配置文件（mybatis-config.xml）中
		<mappers>：将sql映射注册到全局配置中
		<mapper>:注册一个sql映射;
			resource：引用类路径下的sql映射文件;
			url：引用网路路径或者磁盘路径下的sql映射文件
			class：注解版mapper
		有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
		没有sql映射文件，所有的sql都是利用注解写在接口上
		<package>：批量注册
		推荐：比较重要的，复杂的Dao接口我们来写sql映射文件
			 不重要，简单的Dao接口为了开发快速可以使用注解；
	-->
	<mappers>
		<mapper resource="mapper/UnderwriterMapper.xml"/>
		<mapper resource="mapper/BondUnderwriterMapper.xml"/>
		<mapper resource="mapper/BondMapper.xml"/>
		<!-- <mapper class="com.atguigu.mybatis.dao.EmployeeMapperAnnotation"/> -->
		<!-- <package name="com.atguigu.mybatis.dao"/> -->
	</mappers>
</configuration>