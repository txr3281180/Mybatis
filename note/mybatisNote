mybatis下载地址
https://github.com/mybatis/mybatis-3/


     * ->  MapperProxy
     * ->  MapperMethod
     * ->  原码参数解析类： ParamNameResolver
     *

     *
     * 两级缓存
     *
     * 一级缓存：（本地缓存） sqlSession级别的缓存。 一级缓存是一直开启的;
     *      与数据库同一次会话期间查询到的数据会放在本地缓存中。
     *      以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库结果集对象
     *
     *      一级缓存失效情况（没有使用到当前一级缓存的情况，效果就是，还需要再向数据库发出查询）：
     *          1、sqlSession不同。
     *          2、sqlSession相同，查询条件不同.(当前一级缓存中还没有这个数据)
     *          3、sqlSession相同，两次查询之间执行了增删改操作(这次增删改可能对当前数据有影)
     *          4、sqlSession相同，手动清除了一级缓存（缓存清空）
     *
     * 二级缓存：（全局缓存）基于 namespace级别的缓存； 一个namespace 对应一个二级缓存;
     *      工作机制：
     *          1)一个会话，查询一条数据，这个数据就会被放在当前会话的一级缓存中;
     *          2)如果会话关闭，一级缓存中的数据会被保存到二级缓存中，新的会话查询信息，就可以参照二级缓存中的内容;
     *          3)sqlSession ：BondMapper下查询的 Bond, UnderwriterMapper下查询的Underwriter
     *                         不同namespace查出的数据会放在自己对应的缓存中
     *
     *      效果：数据会从二级缓存中获取
     *           查出的数据都会被默认先放在一级缓存中。
     *           只有会话提交或者关闭以后，一级缓存中的数据才会转移到二级缓存中 // openSession.close();
     *
     *      使用：
     *          1)开启全局二级缓存配置：
     *                  <setting name="cacheEnabled" value="true"/>
     *          2)在xxxMapper.xml中配置使用二级缓存：  <cache></cache> 使用默认配置
     *                  <cache eviction="" flushInterval="" readOnly="" size="" type=""></cache>
     * 	  			    详解：
     * 	  			       eviction:缓存的回收策略：
     * 							• LRU – 最近最少使用的：移除最长时间不被使用的对象。
     * 							• FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
     * 							• SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
     * 							• WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
     * 							• 默认的是 LRU。
     *
     *                    flushInterval：缓存刷新间隔：缓存多长时间清空一次，默认不清空，设置一个毫秒值
     *
     *                    readOnly:是否只读：
     * 							true：只读（引用赋值）；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
     * 									mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
     * 							false：非只读（克隆对象赋值）：mybatis觉得获取的数据可能会被修改。
     * 									mybatis会利用序列化&反序列的技术克隆一份新的数据给你。安全，速度慢
     *
     *                    size：缓存存放多少元素；
     *
     *                    type=""：指定自定义缓存的全类名； 实现Cache接口即可；
     * 						   <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
     *          3)非只读需要克隆对象，POJO需要实现序列化接口
     *
     *
     * 	 和缓存有关的设置/属性：
     * 	  			1）、cacheEnabled=true：false：关闭缓存（二级缓存关闭）(一级缓存一直可用的)
     * 	  			2）、每个select标签都有useCache="true"：
     * 	  					false：不使用缓存（一级缓存依然使用，二级缓存不使用）
     * 	  			3）、每个增删改标签的：flushCache="true"：（一级二级都会清除）
     * 	  					增删改执行完成后就会清楚缓存；
     * 	  					测试：flushCache="true"：一级缓存就清空了；二级也会被清除；
     * 	  				每个查询标签：flushCache="false"：
     * 	  					如果flushCache=true;每次查询之后都会清空缓存；缓存是没有被使用的；
     * 	  			4）、sqlSession.clearCache();只是清楚当前session的一级缓存；
     * 	  			5）、localCacheScope：本地缓存作用域：（一级缓存SESSION）；当前会话的所有数据保存在会话缓存中；
     * 	  								STATEMENT：可以禁用一级缓存；
     *
     * 	 第三方缓存整合：
     * 	 		1）、导入第三方缓存包即可；
     * 	 		2）、导入与第三方缓存整合的适配包(mybatis-ehcache	)；官方有；
     * 	 		3）、xxxMapper.xml中使用自定义缓存
     *          <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
     *          <cache-ref namespace=“”/> :引用缓存 ： namespace=》 指定使用哪个namespace中的缓存配置
     *
     *   一个新的sqlSession 访问顺序 二级缓存 -> 一级缓存 -> 数据库